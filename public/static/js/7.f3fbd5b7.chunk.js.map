{"version":3,"sources":["shared/components/UIElements/Card.js","user/pages/Auth.js"],"names":["Card","props","className","style","children","Auth","auth","useContext","AuthContext","useState","isLogin","setIsLoginMode","useHttpClient","isLoading","error","sendRequest","clearError","useForm","email","value","isValid","password","formState","inputHandler","setFormData","authSubmitHandler","event","preventDefault","process","JSON","stringify","inputs","responseData","login","userId","token","formData","FormData","append","name","onClear","asOverlay","onSubmit","element","id","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","VALIDATOR_EMAIL","VALIDATOR_MINLENGTH","disabled","inverse","onClick","undefined","prevMode"],"mappings":"qGAAA,sBAYeA,IARF,SAAAC,GACX,OACE,qBAAKC,UAAS,eAAUD,EAAMC,WAAaC,MAAOF,EAAME,MAAM,SAC3DF,EAAMG,UAGb,C,qNCqIeC,UA/HF,WACX,IAAMC,EAAOC,qBAAWC,KACxB,EAAkCC,oBAAS,GAAK,mBAAzCC,EAAO,KAAEC,EAAc,KAC9B,EAAsDC,cAA9CC,EAAS,EAATA,UAAWC,EAAK,EAALA,MAAOC,EAAW,EAAXA,YAAaC,EAAU,EAAVA,WACvC,EAA+CC,YAC7C,CACEC,MAAO,CACLC,MAAO,GACPC,SAAS,GAEXC,SAAU,CACRF,MAAO,GACPC,SAAS,KAGb,GACD,mBAZME,EAAS,KAAEC,EAAY,KAAEC,EAAW,KAsCrCC,EAAiB,iDAAG,WAAOC,GAAK,qFACb,GAAvBA,EAAMC,kBAEFjB,EAAQ,CAAD,yCAEoBK,EAAY,GAAD,OACjCa,6CAAiC,oBACpC,OACAC,KAAKC,UAAU,CACbZ,MAAOI,EAAUS,OAAOb,MAAMC,MAC9BE,SAAUC,EAAUS,OAAOV,SAASF,QAEtC,CACE,eAAgB,qBAElB,KAAD,EAVKa,EAAY,OAWlB1B,EAAK2B,MAAMD,EAAaE,OAAQF,EAAaG,OAAO,gFAOS,OAPT,WAI9CC,EAAW,IAAIC,UACZC,OAAO,QAAShB,EAAUS,OAAOb,MAAMC,OAChDiB,EAASE,OAAO,OAAQhB,EAAUS,OAAOQ,KAAKpB,OAC9CiB,EAASE,OAAO,WAAYhB,EAAUS,OAAOV,SAASF,OAAO,UAClCJ,EAAY,GAAD,OACjCa,6CAAiC,qBACpC,OACAQ,GACA,KAAD,GAJKJ,EAAY,OAMlB1B,EAAK2B,MAAMD,EAAaE,OAAQF,EAAaG,OAAO,oHAGzD,gBAjCsB,sCAmCvB,OACE,qCACE,cAAC,IAAU,CAACrB,MAAOA,EAAO0B,QAASxB,IACnC,eAAC,IAAI,CAACd,UAAU,iBAAgB,UAC7BW,GAAa,cAAC,IAAc,CAAC4B,WAAS,IACvC,gDACA,uBACA,uBAAMvC,UAAU,YAAYwC,SAAUjB,EAAkB,WACpDf,GACA,cAAC,IAAK,CACJiC,QAAQ,QACRC,GAAG,OACHC,KAAK,OACLC,MAAM,YACNC,WAAY,CAACC,eACbC,UAAU,sBACVC,QAAS3B,IAGb,cAAC,IAAK,CACJqB,GAAG,QACHD,QAAQ,QACRE,KAAK,QACLC,MAAM,QACNC,WAAY,CAACI,eACbF,UAAU,8BACVC,QAAS3B,KAETb,EACF,cAAC,IAAK,CACJkC,GAAG,WACHD,QAAQ,QACRE,KAAK,WACLC,MAAM,WACNC,WAAY,CAACK,YAAoB,IACjCH,UAAU,wCACVC,QAAS3B,IAEX,cAAC,IAAM,CAACsB,KAAK,SAASQ,UAAW/B,EAAUF,QAAQ,SAChDV,EAAU,QAAU,cAGzB,eAAC,IAAM,CAAC4C,SAAO,EAACC,QArGI,WACnB7C,EASHc,EAAY,2BAELF,EAAUS,QAAM,IACnBQ,KAAM,CACJpB,MAAO,GACPC,SAAS,MAGb,GAhBFI,EAAY,2BAELF,EAAUS,QAAM,IACnBQ,UAAMiB,IAERlC,EAAUS,OAAOb,MAAME,SAAWE,EAAUS,OAAOV,SAASD,SAchET,GAAe,SAAC8C,GAAQ,OAAMA,CAAQ,GACxC,EA+EiD,uBAC9B/C,EAAU,SAAW,gBAK1C,C","file":"static/js/7.f3fbd5b7.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import { React, useState, useContext } from 'react';\nimport Input from '../../shared/components/FormElements/Input';\nimport {\n  VALIDATOR_EMAIL,\n  VALIDATOR_MINLENGTH,\n  VALIDATOR_REQUIRE,\n} from '../../shared/utils/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport Button from '../../shared/components/FormElements/Button';\nimport Card from '../../shared/components/UIElements/Card';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport './AuthForm.css';\nimport { AuthContext } from '../../shared/context/auth-context';\n\nconst Auth = () => {\n  const auth = useContext(AuthContext);\n  const [isLogin, setIsLoginMode] = useState(true);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      email: {\n        value: '',\n        isValid: false,\n      },\n      password: {\n        value: '',\n        isValid: false,\n      },\n    },\n    false\n  );\n\n  const switchModeHandler = () => {\n    if (!isLogin) {\n      setFormData(\n        {\n          ...formState.inputs,\n          name: undefined,\n        },\n        formState.inputs.email.isValid && formState.inputs.password.isValid\n      );\n    } else {\n      setFormData(\n        {\n          ...formState.inputs,\n          name: {\n            value: '',\n            isValid: false,\n          },\n        },\n        false\n      );\n    }\n    setIsLoginMode((prevMode) => !prevMode);\n  };\n\n  const authSubmitHandler = async (event) => {\n    event.preventDefault();\n\n    if (isLogin) {\n      try {\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/api/users/login`,\n          'POST',\n          JSON.stringify({\n            email: formState.inputs.email.value,\n            password: formState.inputs.password.value,\n          }),\n          {\n            'Content-Type': 'application/json',\n          }\n        );\n        auth.login(responseData.userId, responseData.token);\n      } catch (err) {}\n    } else {\n      try {\n        const formData = new FormData();\n        formData.append('email', formState.inputs.email.value);\n        formData.append('name', formState.inputs.name.value);\n        formData.append('password', formState.inputs.password.value);\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/api/users/signup`,\n          'POST',\n          formData\n        );\n\n        auth.login(responseData.userId, responseData.token);\n      } catch (err) {}\n    }\n  };\n\n  return (\n    <>\n      <ErrorModal error={error} onClear={clearError} />\n      <Card className='authentication'>\n        {isLoading && <LoadingSpinner asOverlay />}\n        <h2>LOGIN REQUIRED</h2>\n        <hr />\n        <form className='auth-form' onSubmit={authSubmitHandler}>\n          {!isLogin && (\n            <Input\n              element='input'\n              id='name'\n              type='text'\n              label='Your Name'\n              validators={[VALIDATOR_REQUIRE()]}\n              errorText='Please enter a name'\n              onInput={inputHandler}\n            />\n          )}\n          <Input\n            id='email'\n            element='input'\n            type='email'\n            label='Email'\n            validators={[VALIDATOR_EMAIL()]}\n            errorText='Please enter a valid email.'\n            onInput={inputHandler}\n          />\n          {!isLogin}\n          <Input\n            id='password'\n            element='input'\n            type='password'\n            label='Password'\n            validators={[VALIDATOR_MINLENGTH(6)]}\n            errorText='Pease enter a password (6 characters)'\n            onInput={inputHandler}\n          />\n          <Button type='submit' disabled={!formState.isValid}>\n            {isLogin ? 'LOGIN' : 'SIGNUP'}\n          </Button>\n        </form>\n        <Button inverse onClick={switchModeHandler}>\n          SWITCH TO {isLogin ? 'SIGNUP' : 'LOGIN'}\n        </Button>\n      </Card>\n    </>\n  );\n};\n\nexport default Auth;\n"],"sourceRoot":""}