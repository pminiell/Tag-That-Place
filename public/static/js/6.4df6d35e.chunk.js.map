{"version":3,"sources":["shared/components/UIElements/Card.js","places/pages/UpdatePlace.js"],"names":["Card","props","className","style","children","UpdatePlace","auth","useContext","AuthContext","useHttpClient","isLoading","error","sendRequest","clearError","useState","loadedPlace","setLoadedPlace","placeId","useParams","history","useHistory","useForm","title","value","isValid","description","formState","inputHandler","setFormData","useEffect","fetchPlace","process","responseData","place","placeUpdateSubmitHandler","event","preventDefault","JSON","stringify","inputs","Authorization","token","push","userId","onClear","onSubmit","id","element","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","initialValue","initialValid","VALIDATOR_MINLENGTH","disabled"],"mappings":"qGAAA,sBAYeA,IARF,SAAAC,GACX,OACE,qBAAKC,UAAS,eAAUD,EAAMC,WAAaC,MAAOF,EAAME,MAAM,SAC3DF,EAAMG,UAGb,C,oNC0HeC,UApHK,WAClB,IAAMC,EAAOC,qBAAWC,KACxB,EAAsDC,cAA9CC,EAAS,EAATA,UAAWC,EAAK,EAALA,MAAOC,EAAW,EAAXA,YAAaC,EAAU,EAAVA,WACvC,EAAsCC,qBAAU,mBAAzCC,EAAW,KAAEC,EAAc,KAC5BC,EAAUC,cAAYD,QACtBE,EAAUC,cAEhB,EAA+CC,YAC7C,CACEC,MAAO,CACLC,MAAO,GACPC,SAAS,GAEXC,YAAa,CACXF,MAAO,GACPC,SAAS,KAGb,GACD,mBAZME,EAAS,KAAEC,EAAY,KAAEC,EAAW,KAuC3C,GAzBAC,qBAAU,WACR,IAAMC,EAAU,iDAAG,uHAEYlB,EAAY,GAAD,OACjCmB,6CAAiC,uBAAed,IACnD,KAAD,EAFKe,EAAY,OAGlBhB,EAAegB,EAAaC,OAC5BL,EACE,CACEN,MAAO,CACLC,MAAOS,EAAaC,MAAMX,MAC1BE,SAAS,GAEXC,YAAa,CACXF,MAAOS,EAAaC,MAAMR,YAC1BD,SAAS,KAGb,GACA,yGAEL,kBApBe,mCAqBhBM,GACF,GAAG,CAAClB,EAAaK,EAASW,IAEtBlB,EACF,OACE,qBAAKR,UAAU,SAAQ,SACrB,cAAC,IAAc,MAKrB,IAAKa,IAAgBJ,EACnB,OACE,qBAAKT,UAAU,SAAQ,SACrB,cAAC,IAAI,sCAKX,IAAMgC,EAAwB,iDAAG,WAAOC,GAAK,2EACpB,OAAvBA,EAAMC,iBAAiB,kBAEfxB,EAAY,GAAD,OACZmB,6CAAiC,uBAAed,GACnD,QACAoB,KAAKC,UAAU,CACbhB,MAAOI,EAAUa,OAAOjB,MAAMC,MAC9BE,YAAaC,EAAUa,OAAOd,YAAYF,QAE5C,CACE,eAAgB,mBAChBiB,cAAe,UAAYlC,EAAKmC,QAElC,KAAD,EACDtB,EAAQuB,KAAK,IAAMpC,EAAKqC,OAAS,WAAW,uGAE/C,gBAjB6B,sCAmB9B,OACE,qCACE,cAAC,IAAU,CAAChC,MAAOA,EAAOiC,QAAS/B,KACjCH,GAAaK,GACb,uBAAMb,UAAU,aAAa2C,SAAUX,EAAyB,UAC9D,cAAC,IAAK,CACJY,GAAG,QACHC,QAAQ,QACRC,KAAK,OACLC,MAAM,QACNC,WAAY,CAACC,eACbC,UAAU,8BACVC,QAAS1B,EACT2B,aAAcvC,EAAYO,MAC1BiC,cAAc,IAEhB,cAAC,IAAK,CACJT,GAAG,cACHC,QAAQ,WACRE,MAAM,cACNC,WAAY,CAACM,YAAoB,IACjCJ,UAAU,+CACVC,QAAS1B,EACT2B,aAAcvC,EAAYU,YAC1B8B,cAAc,IAEhB,cAAC,IAAM,CAACP,KAAK,SAASS,UAAW/B,EAAUF,QAAQ,+BAO7D,C","file":"static/js/6.4df6d35e.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useEffect, useState, useContext } from 'react';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport './PlaceForm.css';\nimport { useParams, useHistory } from 'react-router-dom';\nimport {\n  VALIDATOR_MINLENGTH,\n  VALIDATOR_REQUIRE,\n} from '../../shared/utils/validators';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport Card from '../../shared/components/UIElements/Card';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\n\nconst UpdatePlace = () => {\n  const auth = useContext(AuthContext);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const [loadedPlace, setLoadedPlace] = useState();\n  const placeId = useParams().placeId;\n  const history = useHistory();\n\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      title: {\n        value: '',\n        isValid: false,\n      },\n      description: {\n        value: '',\n        isValid: false,\n      },\n    },\n    false\n  );\n\n  useEffect(() => {\n    const fetchPlace = async () => {\n      try {\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/api/places/${placeId}`\n        );\n        setLoadedPlace(responseData.place);\n        setFormData(\n          {\n            title: {\n              value: responseData.place.title,\n              isValid: true,\n            },\n            description: {\n              value: responseData.place.description,\n              isValid: true,\n            },\n          },\n          true\n        );\n      } catch (err) {}\n    };\n    fetchPlace();\n  }, [sendRequest, placeId, setFormData]);\n\n  if (isLoading) {\n    return (\n      <div className='center'>\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (!loadedPlace && !error) {\n    return (\n      <div className='center'>\n        <Card>Could not find place!</Card>\n      </div>\n    );\n  }\n\n  const placeUpdateSubmitHandler = async (event) => {\n    event.preventDefault();\n    try {\n      await sendRequest(\n        `${process.env.REACT_APP_BACKEND_URL}/api/places/${placeId}`,\n        'PATCH',\n        JSON.stringify({\n          title: formState.inputs.title.value,\n          description: formState.inputs.description.value,\n        }),\n        {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + auth.token,\n        }\n      );\n      history.push('/' + auth.userId + '/places');\n    } catch (err) {}\n  };\n\n  return (\n    <>\n      <ErrorModal error={error} onClear={clearError} />\n      {!isLoading && loadedPlace && (\n        <form className='place-form' onSubmit={placeUpdateSubmitHandler}>\n          <Input\n            id='title'\n            element='input'\n            type='text'\n            label='Title'\n            validators={[VALIDATOR_REQUIRE()]}\n            errorText='Please enter a valid title.'\n            onInput={inputHandler}\n            initialValue={loadedPlace.title}\n            initialValid={true}\n          />\n          <Input\n            id='description'\n            element='textarea'\n            label='Description'\n            validators={[VALIDATOR_MINLENGTH(5)]}\n            errorText='Pease enter a description with 5 characters.'\n            onInput={inputHandler}\n            initialValue={loadedPlace.description}\n            initialValid={true}\n          />\n          <Button type='submit' disabled={!formState.isValid}>\n            UPDATE PLACE\n          </Button>\n        </form>\n      )}\n    </>\n  );\n};\n\nexport default UpdatePlace;\n"],"sourceRoot":""}